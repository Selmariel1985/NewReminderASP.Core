//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NewReminderASP.Data.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IUserService")]
    public interface IUserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUsers", ReplyAction="http://tempuri.org/IUserService/GetUsersResponse")]
        NewReminderASP.Services.Dtos.UserDto[] GetUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUsers", ReplyAction="http://tempuri.org/IUserService/GetUsersResponse")]
        System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.UserDto[]> GetUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUser", ReplyAction="http://tempuri.org/IUserService/GetUserResponse")]
        NewReminderASP.Services.Dtos.UserDto GetUser(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUser", ReplyAction="http://tempuri.org/IUserService/GetUserResponse")]
        System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.UserDto> GetUserAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserByLogin", ReplyAction="http://tempuri.org/IUserService/GetUserByLoginResponse")]
        NewReminderASP.Services.Dtos.UserDto GetUserByLogin(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserByLogin", ReplyAction="http://tempuri.org/IUserService/GetUserByLoginResponse")]
        System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.UserDto> GetUserByLoginAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserByEmail", ReplyAction="http://tempuri.org/IUserService/GetUserByEmailResponse")]
        NewReminderASP.Services.Dtos.UserDto GetUserByEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserByEmail", ReplyAction="http://tempuri.org/IUserService/GetUserByEmailResponse")]
        System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.UserDto> GetUserByEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateUser", ReplyAction="http://tempuri.org/IUserService/UpdateUserResponse")]
        void UpdateUser(NewReminderASP.Services.Dtos.UserDto updatedUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateUser", ReplyAction="http://tempuri.org/IUserService/UpdateUserResponse")]
        System.Threading.Tasks.Task UpdateUserAsync(NewReminderASP.Services.Dtos.UserDto updatedUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddUser", ReplyAction="http://tempuri.org/IUserService/AddUserResponse")]
        void AddUser(NewReminderASP.Services.Dtos.UserDto user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddUser", ReplyAction="http://tempuri.org/IUserService/AddUserResponse")]
        System.Threading.Tasks.Task AddUserAsync(NewReminderASP.Services.Dtos.UserDto user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/DeleteUser", ReplyAction="http://tempuri.org/IUserService/DeleteUserResponse")]
        void DeleteUser(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/DeleteUser", ReplyAction="http://tempuri.org/IUserService/DeleteUserResponse")]
        System.Threading.Tasks.Task DeleteUserAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserByPassword", ReplyAction="http://tempuri.org/IUserService/GetUserByPasswordResponse")]
        NewReminderASP.Services.Dtos.UserDto GetUserByPassword(string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserByPassword", ReplyAction="http://tempuri.org/IUserService/GetUserByPasswordResponse")]
        System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.UserDto> GetUserByPasswordAsync(string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserByPasswordAndLogin", ReplyAction="http://tempuri.org/IUserService/GetUserByPasswordAndLoginResponse")]
        NewReminderASP.Services.Dtos.UserDto GetUserByPasswordAndLogin(string password, string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserByPasswordAndLogin", ReplyAction="http://tempuri.org/IUserService/GetUserByPasswordAndLoginResponse")]
        System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.UserDto> GetUserByPasswordAndLoginAsync(string password, string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetRoles", ReplyAction="http://tempuri.org/IUserService/GetRolesResponse")]
        NewReminderASP.Services.Dtos.RoleDto[] GetRoles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetRoles", ReplyAction="http://tempuri.org/IUserService/GetRolesResponse")]
        System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.RoleDto[]> GetRolesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserRoles", ReplyAction="http://tempuri.org/IUserService/GetUserRolesResponse")]
        NewReminderASP.Services.Dtos.UserRoleDto GetUserRoles(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserRoles", ReplyAction="http://tempuri.org/IUserService/GetUserRolesResponse")]
        System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.UserRoleDto> GetUserRolesAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddRole", ReplyAction="http://tempuri.org/IUserService/AddRoleResponse")]
        void AddRole(NewReminderASP.Services.Dtos.RoleDto role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddRole", ReplyAction="http://tempuri.org/IUserService/AddRoleResponse")]
        System.Threading.Tasks.Task AddRoleAsync(NewReminderASP.Services.Dtos.RoleDto role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddUserRole", ReplyAction="http://tempuri.org/IUserService/AddUserRoleResponse")]
        void AddUserRole(NewReminderASP.Services.Dtos.UserRoleDto userRole);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddUserRole", ReplyAction="http://tempuri.org/IUserService/AddUserRoleResponse")]
        System.Threading.Tasks.Task AddUserRoleAsync(NewReminderASP.Services.Dtos.UserRoleDto userRole);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateRole", ReplyAction="http://tempuri.org/IUserService/UpdateRoleResponse")]
        void UpdateRole(NewReminderASP.Services.Dtos.RoleDto updatedRole);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateRole", ReplyAction="http://tempuri.org/IUserService/UpdateRoleResponse")]
        System.Threading.Tasks.Task UpdateRoleAsync(NewReminderASP.Services.Dtos.RoleDto updatedRole);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/RemoveRole", ReplyAction="http://tempuri.org/IUserService/RemoveRoleResponse")]
        void RemoveRole(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/RemoveRole", ReplyAction="http://tempuri.org/IUserService/RemoveRoleResponse")]
        System.Threading.Tasks.Task RemoveRoleAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUsersRoles", ReplyAction="http://tempuri.org/IUserService/GetUsersRolesResponse")]
        NewReminderASP.Services.Dtos.UserRoleDto[] GetUsersRoles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUsersRoles", ReplyAction="http://tempuri.org/IUserService/GetUsersRolesResponse")]
        System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.UserRoleDto[]> GetUsersRolesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetRolesByID", ReplyAction="http://tempuri.org/IUserService/GetRolesByIDResponse")]
        NewReminderASP.Services.Dtos.RoleDto GetRolesByID(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetRolesByID", ReplyAction="http://tempuri.org/IUserService/GetRolesByIDResponse")]
        System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.RoleDto> GetRolesByIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AssignRolesToUser", ReplyAction="http://tempuri.org/IUserService/AssignRolesToUserResponse")]
        void AssignRolesToUser(NewReminderASP.Services.Dtos.UserDto user, string[] roles);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AssignRolesToUser", ReplyAction="http://tempuri.org/IUserService/AssignRolesToUserResponse")]
        System.Threading.Tasks.Task AssignRolesToUserAsync(NewReminderASP.Services.Dtos.UserDto user, string[] roles);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateUserRoles", ReplyAction="http://tempuri.org/IUserService/UpdateUserRolesResponse")]
        void UpdateUserRoles(int userId, string roleIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateUserRoles", ReplyAction="http://tempuri.org/IUserService/UpdateUserRolesResponse")]
        System.Threading.Tasks.Task UpdateUserRolesAsync(int userId, string roleIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddUserRoleNormal", ReplyAction="http://tempuri.org/IUserService/AddUserRoleNormalResponse")]
        void AddUserRoleNormal(string userLogin, string roleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddUserRoleNormal", ReplyAction="http://tempuri.org/IUserService/AddUserRoleNormalResponse")]
        System.Threading.Tasks.Task AddUserRoleNormalAsync(string userLogin, string roleName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceChannel : NewReminderASP.Data.ServiceReference1.IUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.ClientBase<NewReminderASP.Data.ServiceReference1.IUserService>, NewReminderASP.Data.ServiceReference1.IUserService {
        
        public UserServiceClient() {
        }
        
        public UserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public NewReminderASP.Services.Dtos.UserDto[] GetUsers() {
            return base.Channel.GetUsers();
        }
        
        public System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.UserDto[]> GetUsersAsync() {
            return base.Channel.GetUsersAsync();
        }
        
        public NewReminderASP.Services.Dtos.UserDto GetUser(int id) {
            return base.Channel.GetUser(id);
        }
        
        public System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.UserDto> GetUserAsync(int id) {
            return base.Channel.GetUserAsync(id);
        }
        
        public NewReminderASP.Services.Dtos.UserDto GetUserByLogin(string login) {
            return base.Channel.GetUserByLogin(login);
        }
        
        public System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.UserDto> GetUserByLoginAsync(string login) {
            return base.Channel.GetUserByLoginAsync(login);
        }
        
        public NewReminderASP.Services.Dtos.UserDto GetUserByEmail(string email) {
            return base.Channel.GetUserByEmail(email);
        }
        
        public System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.UserDto> GetUserByEmailAsync(string email) {
            return base.Channel.GetUserByEmailAsync(email);
        }
        
        public void UpdateUser(NewReminderASP.Services.Dtos.UserDto updatedUser) {
            base.Channel.UpdateUser(updatedUser);
        }
        
        public System.Threading.Tasks.Task UpdateUserAsync(NewReminderASP.Services.Dtos.UserDto updatedUser) {
            return base.Channel.UpdateUserAsync(updatedUser);
        }
        
        public void AddUser(NewReminderASP.Services.Dtos.UserDto user) {
            base.Channel.AddUser(user);
        }
        
        public System.Threading.Tasks.Task AddUserAsync(NewReminderASP.Services.Dtos.UserDto user) {
            return base.Channel.AddUserAsync(user);
        }
        
        public void DeleteUser(int id) {
            base.Channel.DeleteUser(id);
        }
        
        public System.Threading.Tasks.Task DeleteUserAsync(int id) {
            return base.Channel.DeleteUserAsync(id);
        }
        
        public NewReminderASP.Services.Dtos.UserDto GetUserByPassword(string password) {
            return base.Channel.GetUserByPassword(password);
        }
        
        public System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.UserDto> GetUserByPasswordAsync(string password) {
            return base.Channel.GetUserByPasswordAsync(password);
        }
        
        public NewReminderASP.Services.Dtos.UserDto GetUserByPasswordAndLogin(string password, string login) {
            return base.Channel.GetUserByPasswordAndLogin(password, login);
        }
        
        public System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.UserDto> GetUserByPasswordAndLoginAsync(string password, string login) {
            return base.Channel.GetUserByPasswordAndLoginAsync(password, login);
        }
        
        public NewReminderASP.Services.Dtos.RoleDto[] GetRoles() {
            return base.Channel.GetRoles();
        }
        
        public System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.RoleDto[]> GetRolesAsync() {
            return base.Channel.GetRolesAsync();
        }
        
        public NewReminderASP.Services.Dtos.UserRoleDto GetUserRoles(int userId) {
            return base.Channel.GetUserRoles(userId);
        }
        
        public System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.UserRoleDto> GetUserRolesAsync(int userId) {
            return base.Channel.GetUserRolesAsync(userId);
        }
        
        public void AddRole(NewReminderASP.Services.Dtos.RoleDto role) {
            base.Channel.AddRole(role);
        }
        
        public System.Threading.Tasks.Task AddRoleAsync(NewReminderASP.Services.Dtos.RoleDto role) {
            return base.Channel.AddRoleAsync(role);
        }
        
        public void AddUserRole(NewReminderASP.Services.Dtos.UserRoleDto userRole) {
            base.Channel.AddUserRole(userRole);
        }
        
        public System.Threading.Tasks.Task AddUserRoleAsync(NewReminderASP.Services.Dtos.UserRoleDto userRole) {
            return base.Channel.AddUserRoleAsync(userRole);
        }
        
        public void UpdateRole(NewReminderASP.Services.Dtos.RoleDto updatedRole) {
            base.Channel.UpdateRole(updatedRole);
        }
        
        public System.Threading.Tasks.Task UpdateRoleAsync(NewReminderASP.Services.Dtos.RoleDto updatedRole) {
            return base.Channel.UpdateRoleAsync(updatedRole);
        }
        
        public void RemoveRole(int id) {
            base.Channel.RemoveRole(id);
        }
        
        public System.Threading.Tasks.Task RemoveRoleAsync(int id) {
            return base.Channel.RemoveRoleAsync(id);
        }
        
        public NewReminderASP.Services.Dtos.UserRoleDto[] GetUsersRoles() {
            return base.Channel.GetUsersRoles();
        }
        
        public System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.UserRoleDto[]> GetUsersRolesAsync() {
            return base.Channel.GetUsersRolesAsync();
        }
        
        public NewReminderASP.Services.Dtos.RoleDto GetRolesByID(int id) {
            return base.Channel.GetRolesByID(id);
        }
        
        public System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.RoleDto> GetRolesByIDAsync(int id) {
            return base.Channel.GetRolesByIDAsync(id);
        }
        
        public void AssignRolesToUser(NewReminderASP.Services.Dtos.UserDto user, string[] roles) {
            base.Channel.AssignRolesToUser(user, roles);
        }
        
        public System.Threading.Tasks.Task AssignRolesToUserAsync(NewReminderASP.Services.Dtos.UserDto user, string[] roles) {
            return base.Channel.AssignRolesToUserAsync(user, roles);
        }
        
        public void UpdateUserRoles(int userId, string roleIds) {
            base.Channel.UpdateUserRoles(userId, roleIds);
        }
        
        public System.Threading.Tasks.Task UpdateUserRolesAsync(int userId, string roleIds) {
            return base.Channel.UpdateUserRolesAsync(userId, roleIds);
        }
        
        public void AddUserRoleNormal(string userLogin, string roleName) {
            base.Channel.AddUserRoleNormal(userLogin, roleName);
        }
        
        public System.Threading.Tasks.Task AddUserRoleNormalAsync(string userLogin, string roleName) {
            return base.Channel.AddUserRoleNormalAsync(userLogin, roleName);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ICountryService")]
    public interface ICountryService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICountryService/GetCountries", ReplyAction="http://tempuri.org/ICountryService/GetCountriesResponse")]
        NewReminderASP.Services.Dtos.CountryDto[] GetCountries();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICountryService/GetCountries", ReplyAction="http://tempuri.org/ICountryService/GetCountriesResponse")]
        System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.CountryDto[]> GetCountriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICountryService/GetCountry", ReplyAction="http://tempuri.org/ICountryService/GetCountryResponse")]
        NewReminderASP.Services.Dtos.CountryDto GetCountry(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICountryService/GetCountry", ReplyAction="http://tempuri.org/ICountryService/GetCountryResponse")]
        System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.CountryDto> GetCountryAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICountryService/UpdateCountry", ReplyAction="http://tempuri.org/ICountryService/UpdateCountryResponse")]
        void UpdateCountry(NewReminderASP.Services.Dtos.CountryDto updatedCountry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICountryService/UpdateCountry", ReplyAction="http://tempuri.org/ICountryService/UpdateCountryResponse")]
        System.Threading.Tasks.Task UpdateCountryAsync(NewReminderASP.Services.Dtos.CountryDto updatedCountry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICountryService/AddCountry", ReplyAction="http://tempuri.org/ICountryService/AddCountryResponse")]
        void AddCountry(NewReminderASP.Services.Dtos.CountryDto country);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICountryService/AddCountry", ReplyAction="http://tempuri.org/ICountryService/AddCountryResponse")]
        System.Threading.Tasks.Task AddCountryAsync(NewReminderASP.Services.Dtos.CountryDto country);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICountryService/DeleteCountry", ReplyAction="http://tempuri.org/ICountryService/DeleteCountryResponse")]
        void DeleteCountry(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICountryService/DeleteCountry", ReplyAction="http://tempuri.org/ICountryService/DeleteCountryResponse")]
        System.Threading.Tasks.Task DeleteCountryAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICountryServiceChannel : NewReminderASP.Data.ServiceReference1.ICountryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CountryServiceClient : System.ServiceModel.ClientBase<NewReminderASP.Data.ServiceReference1.ICountryService>, NewReminderASP.Data.ServiceReference1.ICountryService {
        
        public CountryServiceClient() {
        }
        
        public CountryServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CountryServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CountryServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CountryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public NewReminderASP.Services.Dtos.CountryDto[] GetCountries() {
            return base.Channel.GetCountries();
        }
        
        public System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.CountryDto[]> GetCountriesAsync() {
            return base.Channel.GetCountriesAsync();
        }
        
        public NewReminderASP.Services.Dtos.CountryDto GetCountry(int id) {
            return base.Channel.GetCountry(id);
        }
        
        public System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.CountryDto> GetCountryAsync(int id) {
            return base.Channel.GetCountryAsync(id);
        }
        
        public void UpdateCountry(NewReminderASP.Services.Dtos.CountryDto updatedCountry) {
            base.Channel.UpdateCountry(updatedCountry);
        }
        
        public System.Threading.Tasks.Task UpdateCountryAsync(NewReminderASP.Services.Dtos.CountryDto updatedCountry) {
            return base.Channel.UpdateCountryAsync(updatedCountry);
        }
        
        public void AddCountry(NewReminderASP.Services.Dtos.CountryDto country) {
            base.Channel.AddCountry(country);
        }
        
        public System.Threading.Tasks.Task AddCountryAsync(NewReminderASP.Services.Dtos.CountryDto country) {
            return base.Channel.AddCountryAsync(country);
        }
        
        public void DeleteCountry(int id) {
            base.Channel.DeleteCountry(id);
        }
        
        public System.Threading.Tasks.Task DeleteCountryAsync(int id) {
            return base.Channel.DeleteCountryAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IAddressService")]
    public interface IAddressService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddressService/GetAddresses", ReplyAction="http://tempuri.org/IAddressService/GetAddressesResponse")]
        NewReminderASP.Services.Dtos.AddressDto[] GetAddresses();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddressService/GetAddresses", ReplyAction="http://tempuri.org/IAddressService/GetAddressesResponse")]
        System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.AddressDto[]> GetAddressesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddressService/GetAddress", ReplyAction="http://tempuri.org/IAddressService/GetAddressResponse")]
        NewReminderASP.Services.Dtos.AddressDto GetAddress(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddressService/GetAddress", ReplyAction="http://tempuri.org/IAddressService/GetAddressResponse")]
        System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.AddressDto> GetAddressAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddressService/GetAddressByID", ReplyAction="http://tempuri.org/IAddressService/GetAddressByIDResponse")]
        NewReminderASP.Services.Dtos.AddressDto GetAddressByID(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddressService/GetAddressByID", ReplyAction="http://tempuri.org/IAddressService/GetAddressByIDResponse")]
        System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.AddressDto> GetAddressByIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddressService/GetAddressesByUserId", ReplyAction="http://tempuri.org/IAddressService/GetAddressesByUserIdResponse")]
        NewReminderASP.Services.Dtos.AddressDto[] GetAddressesByUserId(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddressService/GetAddressesByUserId", ReplyAction="http://tempuri.org/IAddressService/GetAddressesByUserIdResponse")]
        System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.AddressDto[]> GetAddressesByUserIdAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddressService/UpdateAddress", ReplyAction="http://tempuri.org/IAddressService/UpdateAddressResponse")]
        void UpdateAddress(NewReminderASP.Services.Dtos.AddressDto updatedAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddressService/UpdateAddress", ReplyAction="http://tempuri.org/IAddressService/UpdateAddressResponse")]
        System.Threading.Tasks.Task UpdateAddressAsync(NewReminderASP.Services.Dtos.AddressDto updatedAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddressService/AddAddress", ReplyAction="http://tempuri.org/IAddressService/AddAddressResponse")]
        void AddAddress(NewReminderASP.Services.Dtos.AddressDto address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddressService/AddAddress", ReplyAction="http://tempuri.org/IAddressService/AddAddressResponse")]
        System.Threading.Tasks.Task AddAddressAsync(NewReminderASP.Services.Dtos.AddressDto address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddressService/AddAddressRegister", ReplyAction="http://tempuri.org/IAddressService/AddAddressRegisterResponse")]
        void AddAddressRegister(NewReminderASP.Services.Dtos.AddressDto address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddressService/AddAddressRegister", ReplyAction="http://tempuri.org/IAddressService/AddAddressRegisterResponse")]
        System.Threading.Tasks.Task AddAddressRegisterAsync(NewReminderASP.Services.Dtos.AddressDto address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddressService/DeleteAddress", ReplyAction="http://tempuri.org/IAddressService/DeleteAddressResponse")]
        void DeleteAddress(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddressService/DeleteAddress", ReplyAction="http://tempuri.org/IAddressService/DeleteAddressResponse")]
        System.Threading.Tasks.Task DeleteAddressAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAddressServiceChannel : NewReminderASP.Data.ServiceReference1.IAddressService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddressServiceClient : System.ServiceModel.ClientBase<NewReminderASP.Data.ServiceReference1.IAddressService>, NewReminderASP.Data.ServiceReference1.IAddressService {
        
        public AddressServiceClient() {
        }
        
        public AddressServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AddressServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AddressServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AddressServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public NewReminderASP.Services.Dtos.AddressDto[] GetAddresses() {
            return base.Channel.GetAddresses();
        }
        
        public System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.AddressDto[]> GetAddressesAsync() {
            return base.Channel.GetAddressesAsync();
        }
        
        public NewReminderASP.Services.Dtos.AddressDto GetAddress(int id) {
            return base.Channel.GetAddress(id);
        }
        
        public System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.AddressDto> GetAddressAsync(int id) {
            return base.Channel.GetAddressAsync(id);
        }
        
        public NewReminderASP.Services.Dtos.AddressDto GetAddressByID(int id) {
            return base.Channel.GetAddressByID(id);
        }
        
        public System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.AddressDto> GetAddressByIDAsync(int id) {
            return base.Channel.GetAddressByIDAsync(id);
        }
        
        public NewReminderASP.Services.Dtos.AddressDto[] GetAddressesByUserId(int userId) {
            return base.Channel.GetAddressesByUserId(userId);
        }
        
        public System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.AddressDto[]> GetAddressesByUserIdAsync(int userId) {
            return base.Channel.GetAddressesByUserIdAsync(userId);
        }
        
        public void UpdateAddress(NewReminderASP.Services.Dtos.AddressDto updatedAddress) {
            base.Channel.UpdateAddress(updatedAddress);
        }
        
        public System.Threading.Tasks.Task UpdateAddressAsync(NewReminderASP.Services.Dtos.AddressDto updatedAddress) {
            return base.Channel.UpdateAddressAsync(updatedAddress);
        }
        
        public void AddAddress(NewReminderASP.Services.Dtos.AddressDto address) {
            base.Channel.AddAddress(address);
        }
        
        public System.Threading.Tasks.Task AddAddressAsync(NewReminderASP.Services.Dtos.AddressDto address) {
            return base.Channel.AddAddressAsync(address);
        }
        
        public void AddAddressRegister(NewReminderASP.Services.Dtos.AddressDto address) {
            base.Channel.AddAddressRegister(address);
        }
        
        public System.Threading.Tasks.Task AddAddressRegisterAsync(NewReminderASP.Services.Dtos.AddressDto address) {
            return base.Channel.AddAddressRegisterAsync(address);
        }
        
        public void DeleteAddress(int id) {
            base.Channel.DeleteAddress(id);
        }
        
        public System.Threading.Tasks.Task DeleteAddressAsync(int id) {
            return base.Channel.DeleteAddressAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IPersonalInfoService")]
    public interface IPersonalInfoService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonalInfoService/GetPersonalInfos", ReplyAction="http://tempuri.org/IPersonalInfoService/GetPersonalInfosResponse")]
        NewReminderASP.Services.Dtos.PersonalInfoDto[] GetPersonalInfos();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonalInfoService/GetPersonalInfos", ReplyAction="http://tempuri.org/IPersonalInfoService/GetPersonalInfosResponse")]
        System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.PersonalInfoDto[]> GetPersonalInfosAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonalInfoService/GetPersonalInfo", ReplyAction="http://tempuri.org/IPersonalInfoService/GetPersonalInfoResponse")]
        NewReminderASP.Services.Dtos.PersonalInfoDto GetPersonalInfo(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonalInfoService/GetPersonalInfo", ReplyAction="http://tempuri.org/IPersonalInfoService/GetPersonalInfoResponse")]
        System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.PersonalInfoDto> GetPersonalInfoAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonalInfoService/UpdatePersonalInfo", ReplyAction="http://tempuri.org/IPersonalInfoService/UpdatePersonalInfoResponse")]
        void UpdatePersonalInfo(NewReminderASP.Services.Dtos.PersonalInfoDto updatedPersonalInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonalInfoService/UpdatePersonalInfo", ReplyAction="http://tempuri.org/IPersonalInfoService/UpdatePersonalInfoResponse")]
        System.Threading.Tasks.Task UpdatePersonalInfoAsync(NewReminderASP.Services.Dtos.PersonalInfoDto updatedPersonalInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonalInfoService/AddPersonalInfo", ReplyAction="http://tempuri.org/IPersonalInfoService/AddPersonalInfoResponse")]
        void AddPersonalInfo(NewReminderASP.Services.Dtos.PersonalInfoDto personalInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonalInfoService/AddPersonalInfo", ReplyAction="http://tempuri.org/IPersonalInfoService/AddPersonalInfoResponse")]
        System.Threading.Tasks.Task AddPersonalInfoAsync(NewReminderASP.Services.Dtos.PersonalInfoDto personalInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonalInfoService/DeletePersonalInfo", ReplyAction="http://tempuri.org/IPersonalInfoService/DeletePersonalInfoResponse")]
        void DeletePersonalInfo(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonalInfoService/DeletePersonalInfo", ReplyAction="http://tempuri.org/IPersonalInfoService/DeletePersonalInfoResponse")]
        System.Threading.Tasks.Task DeletePersonalInfoAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPersonalInfoServiceChannel : NewReminderASP.Data.ServiceReference1.IPersonalInfoService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PersonalInfoServiceClient : System.ServiceModel.ClientBase<NewReminderASP.Data.ServiceReference1.IPersonalInfoService>, NewReminderASP.Data.ServiceReference1.IPersonalInfoService {
        
        public PersonalInfoServiceClient() {
        }
        
        public PersonalInfoServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PersonalInfoServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PersonalInfoServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PersonalInfoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public NewReminderASP.Services.Dtos.PersonalInfoDto[] GetPersonalInfos() {
            return base.Channel.GetPersonalInfos();
        }
        
        public System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.PersonalInfoDto[]> GetPersonalInfosAsync() {
            return base.Channel.GetPersonalInfosAsync();
        }
        
        public NewReminderASP.Services.Dtos.PersonalInfoDto GetPersonalInfo(int id) {
            return base.Channel.GetPersonalInfo(id);
        }
        
        public System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.PersonalInfoDto> GetPersonalInfoAsync(int id) {
            return base.Channel.GetPersonalInfoAsync(id);
        }
        
        public void UpdatePersonalInfo(NewReminderASP.Services.Dtos.PersonalInfoDto updatedPersonalInfo) {
            base.Channel.UpdatePersonalInfo(updatedPersonalInfo);
        }
        
        public System.Threading.Tasks.Task UpdatePersonalInfoAsync(NewReminderASP.Services.Dtos.PersonalInfoDto updatedPersonalInfo) {
            return base.Channel.UpdatePersonalInfoAsync(updatedPersonalInfo);
        }
        
        public void AddPersonalInfo(NewReminderASP.Services.Dtos.PersonalInfoDto personalInfo) {
            base.Channel.AddPersonalInfo(personalInfo);
        }
        
        public System.Threading.Tasks.Task AddPersonalInfoAsync(NewReminderASP.Services.Dtos.PersonalInfoDto personalInfo) {
            return base.Channel.AddPersonalInfoAsync(personalInfo);
        }
        
        public void DeletePersonalInfo(int id) {
            base.Channel.DeletePersonalInfo(id);
        }
        
        public System.Threading.Tasks.Task DeletePersonalInfoAsync(int id) {
            return base.Channel.DeletePersonalInfoAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IEventService")]
    public interface IEventService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetEvents", ReplyAction="http://tempuri.org/IEventService/GetEventsResponse")]
        NewReminderASP.Services.Dtos.EventDto[] GetEvents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetEvents", ReplyAction="http://tempuri.org/IEventService/GetEventsResponse")]
        System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.EventDto[]> GetEventsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetEvent", ReplyAction="http://tempuri.org/IEventService/GetEventResponse")]
        NewReminderASP.Services.Dtos.EventDto GetEvent(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetEvent", ReplyAction="http://tempuri.org/IEventService/GetEventResponse")]
        System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.EventDto> GetEventAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/UpdateEvent", ReplyAction="http://tempuri.org/IEventService/UpdateEventResponse")]
        void UpdateEvent(NewReminderASP.Services.Dtos.EventDto updatedEvent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/UpdateEvent", ReplyAction="http://tempuri.org/IEventService/UpdateEventResponse")]
        System.Threading.Tasks.Task UpdateEventAsync(NewReminderASP.Services.Dtos.EventDto updatedEvent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/AddEvent", ReplyAction="http://tempuri.org/IEventService/AddEventResponse")]
        void AddEvent(NewReminderASP.Services.Dtos.EventDto events);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/AddEvent", ReplyAction="http://tempuri.org/IEventService/AddEventResponse")]
        System.Threading.Tasks.Task AddEventAsync(NewReminderASP.Services.Dtos.EventDto events);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/DeleteEvent", ReplyAction="http://tempuri.org/IEventService/DeleteEventResponse")]
        void DeleteEvent(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/DeleteEvent", ReplyAction="http://tempuri.org/IEventService/DeleteEventResponse")]
        System.Threading.Tasks.Task DeleteEventAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetEventDetails", ReplyAction="http://tempuri.org/IEventService/GetEventDetailsResponse")]
        NewReminderASP.Services.Dtos.EventDetailDto[] GetEventDetails();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetEventDetails", ReplyAction="http://tempuri.org/IEventService/GetEventDetailsResponse")]
        System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.EventDetailDto[]> GetEventDetailsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetEventDetail", ReplyAction="http://tempuri.org/IEventService/GetEventDetailResponse")]
        NewReminderASP.Services.Dtos.EventDetailDto GetEventDetail(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetEventDetail", ReplyAction="http://tempuri.org/IEventService/GetEventDetailResponse")]
        System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.EventDetailDto> GetEventDetailAsync(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/UpdateEventDetail", ReplyAction="http://tempuri.org/IEventService/UpdateEventDetailResponse")]
        void UpdateEventDetail(NewReminderASP.Services.Dtos.EventDetailDto updatedEventDetail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/UpdateEventDetail", ReplyAction="http://tempuri.org/IEventService/UpdateEventDetailResponse")]
        System.Threading.Tasks.Task UpdateEventDetailAsync(NewReminderASP.Services.Dtos.EventDetailDto updatedEventDetail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/AddEventDetail", ReplyAction="http://tempuri.org/IEventService/AddEventDetailResponse")]
        void AddEventDetail(NewReminderASP.Services.Dtos.EventDetailDto eventDetail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/AddEventDetail", ReplyAction="http://tempuri.org/IEventService/AddEventDetailResponse")]
        System.Threading.Tasks.Task AddEventDetailAsync(NewReminderASP.Services.Dtos.EventDetailDto eventDetail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/DeleteEventDetail", ReplyAction="http://tempuri.org/IEventService/DeleteEventDetailResponse")]
        void DeleteEventDetail(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/DeleteEventDetail", ReplyAction="http://tempuri.org/IEventService/DeleteEventDetailResponse")]
        System.Threading.Tasks.Task DeleteEventDetailAsync(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetEventRecurrences", ReplyAction="http://tempuri.org/IEventService/GetEventRecurrencesResponse")]
        NewReminderASP.Services.Dtos.EventRecurrenceDto[] GetEventRecurrences();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetEventRecurrences", ReplyAction="http://tempuri.org/IEventService/GetEventRecurrencesResponse")]
        System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.EventRecurrenceDto[]> GetEventRecurrencesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetEventRecurrence", ReplyAction="http://tempuri.org/IEventService/GetEventRecurrenceResponse")]
        NewReminderASP.Services.Dtos.EventRecurrenceDto GetEventRecurrence(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetEventRecurrence", ReplyAction="http://tempuri.org/IEventService/GetEventRecurrenceResponse")]
        System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.EventRecurrenceDto> GetEventRecurrenceAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/UpdateEventRecurrence", ReplyAction="http://tempuri.org/IEventService/UpdateEventRecurrenceResponse")]
        void UpdateEventRecurrence(NewReminderASP.Services.Dtos.EventRecurrenceDto updatedEventRecurrence);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/UpdateEventRecurrence", ReplyAction="http://tempuri.org/IEventService/UpdateEventRecurrenceResponse")]
        System.Threading.Tasks.Task UpdateEventRecurrenceAsync(NewReminderASP.Services.Dtos.EventRecurrenceDto updatedEventRecurrence);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/AddEventRecurrence", ReplyAction="http://tempuri.org/IEventService/AddEventRecurrenceResponse")]
        void AddEventRecurrence(NewReminderASP.Services.Dtos.EventRecurrenceDto eventRecurrence);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/AddEventRecurrence", ReplyAction="http://tempuri.org/IEventService/AddEventRecurrenceResponse")]
        System.Threading.Tasks.Task AddEventRecurrenceAsync(NewReminderASP.Services.Dtos.EventRecurrenceDto eventRecurrence);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/DeleteEventRecurrence", ReplyAction="http://tempuri.org/IEventService/DeleteEventRecurrenceResponse")]
        void DeleteEventRecurrence(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/DeleteEventRecurrence", ReplyAction="http://tempuri.org/IEventService/DeleteEventRecurrenceResponse")]
        System.Threading.Tasks.Task DeleteEventRecurrenceAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetEventTypes", ReplyAction="http://tempuri.org/IEventService/GetEventTypesResponse")]
        NewReminderASP.Services.Dtos.EventTypeDto[] GetEventTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetEventTypes", ReplyAction="http://tempuri.org/IEventService/GetEventTypesResponse")]
        System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.EventTypeDto[]> GetEventTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetEventType", ReplyAction="http://tempuri.org/IEventService/GetEventTypeResponse")]
        NewReminderASP.Services.Dtos.EventTypeDto GetEventType(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetEventType", ReplyAction="http://tempuri.org/IEventService/GetEventTypeResponse")]
        System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.EventTypeDto> GetEventTypeAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/UpdateEventType", ReplyAction="http://tempuri.org/IEventService/UpdateEventTypeResponse")]
        void UpdateEventType(NewReminderASP.Services.Dtos.EventTypeDto updatedEventType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/UpdateEventType", ReplyAction="http://tempuri.org/IEventService/UpdateEventTypeResponse")]
        System.Threading.Tasks.Task UpdateEventTypeAsync(NewReminderASP.Services.Dtos.EventTypeDto updatedEventType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/AddPEventType", ReplyAction="http://tempuri.org/IEventService/AddPEventTypeResponse")]
        void AddPEventType(NewReminderASP.Services.Dtos.EventTypeDto eventType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/AddPEventType", ReplyAction="http://tempuri.org/IEventService/AddPEventTypeResponse")]
        System.Threading.Tasks.Task AddPEventTypeAsync(NewReminderASP.Services.Dtos.EventTypeDto eventType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/DeleteEventType", ReplyAction="http://tempuri.org/IEventService/DeleteEventTypeResponse")]
        void DeleteEventType(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/DeleteEventType", ReplyAction="http://tempuri.org/IEventService/DeleteEventTypeResponse")]
        System.Threading.Tasks.Task DeleteEventTypeAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEventServiceChannel : NewReminderASP.Data.ServiceReference1.IEventService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EventServiceClient : System.ServiceModel.ClientBase<NewReminderASP.Data.ServiceReference1.IEventService>, NewReminderASP.Data.ServiceReference1.IEventService {
        
        public EventServiceClient() {
        }
        
        public EventServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EventServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EventServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EventServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public NewReminderASP.Services.Dtos.EventDto[] GetEvents() {
            return base.Channel.GetEvents();
        }
        
        public System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.EventDto[]> GetEventsAsync() {
            return base.Channel.GetEventsAsync();
        }
        
        public NewReminderASP.Services.Dtos.EventDto GetEvent(int Id) {
            return base.Channel.GetEvent(Id);
        }
        
        public System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.EventDto> GetEventAsync(int Id) {
            return base.Channel.GetEventAsync(Id);
        }
        
        public void UpdateEvent(NewReminderASP.Services.Dtos.EventDto updatedEvent) {
            base.Channel.UpdateEvent(updatedEvent);
        }
        
        public System.Threading.Tasks.Task UpdateEventAsync(NewReminderASP.Services.Dtos.EventDto updatedEvent) {
            return base.Channel.UpdateEventAsync(updatedEvent);
        }
        
        public void AddEvent(NewReminderASP.Services.Dtos.EventDto events) {
            base.Channel.AddEvent(events);
        }
        
        public System.Threading.Tasks.Task AddEventAsync(NewReminderASP.Services.Dtos.EventDto events) {
            return base.Channel.AddEventAsync(events);
        }
        
        public void DeleteEvent(int id) {
            base.Channel.DeleteEvent(id);
        }
        
        public System.Threading.Tasks.Task DeleteEventAsync(int id) {
            return base.Channel.DeleteEventAsync(id);
        }
        
        public NewReminderASP.Services.Dtos.EventDetailDto[] GetEventDetails() {
            return base.Channel.GetEventDetails();
        }
        
        public System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.EventDetailDto[]> GetEventDetailsAsync() {
            return base.Channel.GetEventDetailsAsync();
        }
        
        public NewReminderASP.Services.Dtos.EventDetailDto GetEventDetail(int eventId) {
            return base.Channel.GetEventDetail(eventId);
        }
        
        public System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.EventDetailDto> GetEventDetailAsync(int eventId) {
            return base.Channel.GetEventDetailAsync(eventId);
        }
        
        public void UpdateEventDetail(NewReminderASP.Services.Dtos.EventDetailDto updatedEventDetail) {
            base.Channel.UpdateEventDetail(updatedEventDetail);
        }
        
        public System.Threading.Tasks.Task UpdateEventDetailAsync(NewReminderASP.Services.Dtos.EventDetailDto updatedEventDetail) {
            return base.Channel.UpdateEventDetailAsync(updatedEventDetail);
        }
        
        public void AddEventDetail(NewReminderASP.Services.Dtos.EventDetailDto eventDetail) {
            base.Channel.AddEventDetail(eventDetail);
        }
        
        public System.Threading.Tasks.Task AddEventDetailAsync(NewReminderASP.Services.Dtos.EventDetailDto eventDetail) {
            return base.Channel.AddEventDetailAsync(eventDetail);
        }
        
        public void DeleteEventDetail(int eventId) {
            base.Channel.DeleteEventDetail(eventId);
        }
        
        public System.Threading.Tasks.Task DeleteEventDetailAsync(int eventId) {
            return base.Channel.DeleteEventDetailAsync(eventId);
        }
        
        public NewReminderASP.Services.Dtos.EventRecurrenceDto[] GetEventRecurrences() {
            return base.Channel.GetEventRecurrences();
        }
        
        public System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.EventRecurrenceDto[]> GetEventRecurrencesAsync() {
            return base.Channel.GetEventRecurrencesAsync();
        }
        
        public NewReminderASP.Services.Dtos.EventRecurrenceDto GetEventRecurrence(int Id) {
            return base.Channel.GetEventRecurrence(Id);
        }
        
        public System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.EventRecurrenceDto> GetEventRecurrenceAsync(int Id) {
            return base.Channel.GetEventRecurrenceAsync(Id);
        }
        
        public void UpdateEventRecurrence(NewReminderASP.Services.Dtos.EventRecurrenceDto updatedEventRecurrence) {
            base.Channel.UpdateEventRecurrence(updatedEventRecurrence);
        }
        
        public System.Threading.Tasks.Task UpdateEventRecurrenceAsync(NewReminderASP.Services.Dtos.EventRecurrenceDto updatedEventRecurrence) {
            return base.Channel.UpdateEventRecurrenceAsync(updatedEventRecurrence);
        }
        
        public void AddEventRecurrence(NewReminderASP.Services.Dtos.EventRecurrenceDto eventRecurrence) {
            base.Channel.AddEventRecurrence(eventRecurrence);
        }
        
        public System.Threading.Tasks.Task AddEventRecurrenceAsync(NewReminderASP.Services.Dtos.EventRecurrenceDto eventRecurrence) {
            return base.Channel.AddEventRecurrenceAsync(eventRecurrence);
        }
        
        public void DeleteEventRecurrence(int id) {
            base.Channel.DeleteEventRecurrence(id);
        }
        
        public System.Threading.Tasks.Task DeleteEventRecurrenceAsync(int id) {
            return base.Channel.DeleteEventRecurrenceAsync(id);
        }
        
        public NewReminderASP.Services.Dtos.EventTypeDto[] GetEventTypes() {
            return base.Channel.GetEventTypes();
        }
        
        public System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.EventTypeDto[]> GetEventTypesAsync() {
            return base.Channel.GetEventTypesAsync();
        }
        
        public NewReminderASP.Services.Dtos.EventTypeDto GetEventType(int Id) {
            return base.Channel.GetEventType(Id);
        }
        
        public System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.EventTypeDto> GetEventTypeAsync(int Id) {
            return base.Channel.GetEventTypeAsync(Id);
        }
        
        public void UpdateEventType(NewReminderASP.Services.Dtos.EventTypeDto updatedEventType) {
            base.Channel.UpdateEventType(updatedEventType);
        }
        
        public System.Threading.Tasks.Task UpdateEventTypeAsync(NewReminderASP.Services.Dtos.EventTypeDto updatedEventType) {
            return base.Channel.UpdateEventTypeAsync(updatedEventType);
        }
        
        public void AddPEventType(NewReminderASP.Services.Dtos.EventTypeDto eventType) {
            base.Channel.AddPEventType(eventType);
        }
        
        public System.Threading.Tasks.Task AddPEventTypeAsync(NewReminderASP.Services.Dtos.EventTypeDto eventType) {
            return base.Channel.AddPEventTypeAsync(eventType);
        }
        
        public void DeleteEventType(int id) {
            base.Channel.DeleteEventType(id);
        }
        
        public System.Threading.Tasks.Task DeleteEventTypeAsync(int id) {
            return base.Channel.DeleteEventTypeAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IPhoneService")]
    public interface IPhoneService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoneService/GetUserPhones", ReplyAction="http://tempuri.org/IPhoneService/GetUserPhonesResponse")]
        NewReminderASP.Services.Dtos.UserPhoneDto[] GetUserPhones();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoneService/GetUserPhones", ReplyAction="http://tempuri.org/IPhoneService/GetUserPhonesResponse")]
        System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.UserPhoneDto[]> GetUserPhonesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoneService/GetUserPhonesByUserId", ReplyAction="http://tempuri.org/IPhoneService/GetUserPhonesByUserIdResponse")]
        NewReminderASP.Services.Dtos.UserPhoneDto[] GetUserPhonesByUserId(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoneService/GetUserPhonesByUserId", ReplyAction="http://tempuri.org/IPhoneService/GetUserPhonesByUserIdResponse")]
        System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.UserPhoneDto[]> GetUserPhonesByUserIdAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoneService/GetUserPhone", ReplyAction="http://tempuri.org/IPhoneService/GetUserPhoneResponse")]
        NewReminderASP.Services.Dtos.UserPhoneDto GetUserPhone(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoneService/GetUserPhone", ReplyAction="http://tempuri.org/IPhoneService/GetUserPhoneResponse")]
        System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.UserPhoneDto> GetUserPhoneAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoneService/UpdateUserPhone", ReplyAction="http://tempuri.org/IPhoneService/UpdateUserPhoneResponse")]
        void UpdateUserPhone(NewReminderASP.Services.Dtos.UserPhoneDto updatedUserPhone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoneService/UpdateUserPhone", ReplyAction="http://tempuri.org/IPhoneService/UpdateUserPhoneResponse")]
        System.Threading.Tasks.Task UpdateUserPhoneAsync(NewReminderASP.Services.Dtos.UserPhoneDto updatedUserPhone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoneService/AddUserPhone", ReplyAction="http://tempuri.org/IPhoneService/AddUserPhoneResponse")]
        void AddUserPhone(NewReminderASP.Services.Dtos.UserPhoneDto userPhone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoneService/AddUserPhone", ReplyAction="http://tempuri.org/IPhoneService/AddUserPhoneResponse")]
        System.Threading.Tasks.Task AddUserPhoneAsync(NewReminderASP.Services.Dtos.UserPhoneDto userPhone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoneService/AddUserPhoneRegister", ReplyAction="http://tempuri.org/IPhoneService/AddUserPhoneRegisterResponse")]
        void AddUserPhoneRegister(NewReminderASP.Services.Dtos.UserPhoneDto userPhone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoneService/AddUserPhoneRegister", ReplyAction="http://tempuri.org/IPhoneService/AddUserPhoneRegisterResponse")]
        System.Threading.Tasks.Task AddUserPhoneRegisterAsync(NewReminderASP.Services.Dtos.UserPhoneDto userPhone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoneService/DeleteUserPhone", ReplyAction="http://tempuri.org/IPhoneService/DeleteUserPhoneResponse")]
        void DeleteUserPhone(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoneService/DeleteUserPhone", ReplyAction="http://tempuri.org/IPhoneService/DeleteUserPhoneResponse")]
        System.Threading.Tasks.Task DeleteUserPhoneAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoneService/GetPhoneTypes", ReplyAction="http://tempuri.org/IPhoneService/GetPhoneTypesResponse")]
        NewReminderASP.Services.Dtos.PhoneTypeDto[] GetPhoneTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoneService/GetPhoneTypes", ReplyAction="http://tempuri.org/IPhoneService/GetPhoneTypesResponse")]
        System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.PhoneTypeDto[]> GetPhoneTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoneService/GetPhoneType", ReplyAction="http://tempuri.org/IPhoneService/GetPhoneTypeResponse")]
        NewReminderASP.Services.Dtos.PhoneTypeDto GetPhoneType(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoneService/GetPhoneType", ReplyAction="http://tempuri.org/IPhoneService/GetPhoneTypeResponse")]
        System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.PhoneTypeDto> GetPhoneTypeAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoneService/UpdatePhoneType", ReplyAction="http://tempuri.org/IPhoneService/UpdatePhoneTypeResponse")]
        void UpdatePhoneType(NewReminderASP.Services.Dtos.PhoneTypeDto updatedPhoneType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoneService/UpdatePhoneType", ReplyAction="http://tempuri.org/IPhoneService/UpdatePhoneTypeResponse")]
        System.Threading.Tasks.Task UpdatePhoneTypeAsync(NewReminderASP.Services.Dtos.PhoneTypeDto updatedPhoneType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoneService/AddPhoneType", ReplyAction="http://tempuri.org/IPhoneService/AddPhoneTypeResponse")]
        void AddPhoneType(NewReminderASP.Services.Dtos.PhoneTypeDto eventPhoneType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoneService/AddPhoneType", ReplyAction="http://tempuri.org/IPhoneService/AddPhoneTypeResponse")]
        System.Threading.Tasks.Task AddPhoneTypeAsync(NewReminderASP.Services.Dtos.PhoneTypeDto eventPhoneType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoneService/DeletePhoneType", ReplyAction="http://tempuri.org/IPhoneService/DeletePhoneTypeResponse")]
        void DeletePhoneType(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoneService/DeletePhoneType", ReplyAction="http://tempuri.org/IPhoneService/DeletePhoneTypeResponse")]
        System.Threading.Tasks.Task DeletePhoneTypeAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPhoneServiceChannel : NewReminderASP.Data.ServiceReference1.IPhoneService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PhoneServiceClient : System.ServiceModel.ClientBase<NewReminderASP.Data.ServiceReference1.IPhoneService>, NewReminderASP.Data.ServiceReference1.IPhoneService {
        
        public PhoneServiceClient() {
        }
        
        public PhoneServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PhoneServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PhoneServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PhoneServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public NewReminderASP.Services.Dtos.UserPhoneDto[] GetUserPhones() {
            return base.Channel.GetUserPhones();
        }
        
        public System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.UserPhoneDto[]> GetUserPhonesAsync() {
            return base.Channel.GetUserPhonesAsync();
        }
        
        public NewReminderASP.Services.Dtos.UserPhoneDto[] GetUserPhonesByUserId(int userId) {
            return base.Channel.GetUserPhonesByUserId(userId);
        }
        
        public System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.UserPhoneDto[]> GetUserPhonesByUserIdAsync(int userId) {
            return base.Channel.GetUserPhonesByUserIdAsync(userId);
        }
        
        public NewReminderASP.Services.Dtos.UserPhoneDto GetUserPhone(int id) {
            return base.Channel.GetUserPhone(id);
        }
        
        public System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.UserPhoneDto> GetUserPhoneAsync(int id) {
            return base.Channel.GetUserPhoneAsync(id);
        }
        
        public void UpdateUserPhone(NewReminderASP.Services.Dtos.UserPhoneDto updatedUserPhone) {
            base.Channel.UpdateUserPhone(updatedUserPhone);
        }
        
        public System.Threading.Tasks.Task UpdateUserPhoneAsync(NewReminderASP.Services.Dtos.UserPhoneDto updatedUserPhone) {
            return base.Channel.UpdateUserPhoneAsync(updatedUserPhone);
        }
        
        public void AddUserPhone(NewReminderASP.Services.Dtos.UserPhoneDto userPhone) {
            base.Channel.AddUserPhone(userPhone);
        }
        
        public System.Threading.Tasks.Task AddUserPhoneAsync(NewReminderASP.Services.Dtos.UserPhoneDto userPhone) {
            return base.Channel.AddUserPhoneAsync(userPhone);
        }
        
        public void AddUserPhoneRegister(NewReminderASP.Services.Dtos.UserPhoneDto userPhone) {
            base.Channel.AddUserPhoneRegister(userPhone);
        }
        
        public System.Threading.Tasks.Task AddUserPhoneRegisterAsync(NewReminderASP.Services.Dtos.UserPhoneDto userPhone) {
            return base.Channel.AddUserPhoneRegisterAsync(userPhone);
        }
        
        public void DeleteUserPhone(int id) {
            base.Channel.DeleteUserPhone(id);
        }
        
        public System.Threading.Tasks.Task DeleteUserPhoneAsync(int id) {
            return base.Channel.DeleteUserPhoneAsync(id);
        }
        
        public NewReminderASP.Services.Dtos.PhoneTypeDto[] GetPhoneTypes() {
            return base.Channel.GetPhoneTypes();
        }
        
        public System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.PhoneTypeDto[]> GetPhoneTypesAsync() {
            return base.Channel.GetPhoneTypesAsync();
        }
        
        public NewReminderASP.Services.Dtos.PhoneTypeDto GetPhoneType(int id) {
            return base.Channel.GetPhoneType(id);
        }
        
        public System.Threading.Tasks.Task<NewReminderASP.Services.Dtos.PhoneTypeDto> GetPhoneTypeAsync(int id) {
            return base.Channel.GetPhoneTypeAsync(id);
        }
        
        public void UpdatePhoneType(NewReminderASP.Services.Dtos.PhoneTypeDto updatedPhoneType) {
            base.Channel.UpdatePhoneType(updatedPhoneType);
        }
        
        public System.Threading.Tasks.Task UpdatePhoneTypeAsync(NewReminderASP.Services.Dtos.PhoneTypeDto updatedPhoneType) {
            return base.Channel.UpdatePhoneTypeAsync(updatedPhoneType);
        }
        
        public void AddPhoneType(NewReminderASP.Services.Dtos.PhoneTypeDto eventPhoneType) {
            base.Channel.AddPhoneType(eventPhoneType);
        }
        
        public System.Threading.Tasks.Task AddPhoneTypeAsync(NewReminderASP.Services.Dtos.PhoneTypeDto eventPhoneType) {
            return base.Channel.AddPhoneTypeAsync(eventPhoneType);
        }
        
        public void DeletePhoneType(int id) {
            base.Channel.DeletePhoneType(id);
        }
        
        public System.Threading.Tasks.Task DeletePhoneTypeAsync(int id) {
            return base.Channel.DeletePhoneTypeAsync(id);
        }
    }
}
